
/*
	mixed opt. kernel with local memory (multiple data structures)
*/

#define WG 16
#define R0 0
#define R1 0
#define WD0 (WG+2*R0)
#define WD1 (WG+2*R1)	// the width of the local space
#define HT0 (WG+2*R0)
#define HT1 (WG+2*R1)	// the height of the local space

__kernel void kernelLMC(const __global float *in0, const __global float *in1, __global float *out, const int cdim, const int rdim, const int cdimIn0, const int rdimIn0, const int cdimIn1, const int rdimIn1)
{
	int tgx = get_global_id(0);
	int tgy = get_global_id(1);
	int tlx = get_local_id(0);
	int tly = get_local_id(1);
	int wgx = get_group_id(0);
	int wgy = get_group_id(1);
	int cc = 0;
	int rr = 0;
	int ll = 0;
	int bx0=(wgx)*WG;
	int by0=(wgy)*WG;
	int bx1=(wgx)*WG;
	int by1=(wgy)*WG;
	
	__local float LM0[WD0*HT0];
	__local float LM1[WD1*HT1];

	float retVal0 = 0.0f;
	float retVal1 = 0.0f;
	
	if(1==1){//central data (base) 
		int dl = (tly+R0) * WD0 + (tlx+R0);
		int dg = (bx0+tlx)+(by0+tly)*cdimIn0;
		LM0[dl] = in0[dg];
	}
	
	barrier(CLK_LOCAL_MEM_FENCE);
	int useIdx0=(tly)*WD0+(tlx);
	retVal0 += LM0[useIdx0];


	if(1==1){//central data (base) 
		int dl = (tly+R1) * WD1 + (tlx+R1);
		int dg = (bx1+tlx)+(by1+tly)*cdimIn1;
		LM1[dl] = in1[dg];
	}
	
	barrier(CLK_LOCAL_MEM_FENCE);
	int useIdx1=(tly)*WD1+(tlx);
	retVal1 += LM1[useIdx1];


		
	out[tgy*cdim+tgx] = retVal0+retVal1;

	return ;
}

